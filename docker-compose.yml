 
services:
  # PostgreSQL for Wallet Management Service
  wallet-db:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: wallet_user
      POSTGRES_PASSWORD: wallet_password
      POSTGRES_DB: wallet_db
    volumes:
      - wallet-db-data:/var/lib/postgresql/data

  # Wallet Management Service
  wallet-management-service:
    build:
      context: ./wallet-management-service
      dockerfile: Dockerfile
    environment:
      PG_URL: 'postgres://wallet_user:wallet_password@wallet-db:5432/wallet_db'
      LOG_LEVEL: trace
    depends_on:
      - wallet-db
    ports:
      - "8081:8080"

  # PostgreSQL for Query Service (Read Model)
  query-db:
    image: postgres:15
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: query_user
      POSTGRES_PASSWORD: query_password
      POSTGRES_DB: query_db
      LOG_LEVEL: trace
    volumes:
      - query-db-data:/var/lib/postgresql/data


  # Asset Query Service (Reads from Query DB and Serves Clients)
  asset-query-service:
    build:
      context: ./asset-query-service
      dockerfile: Dockerfile
    restart: always
    environment:
      QUERY_DB_HOST: query-db
      QUERY_DB_PORT: 5432
      QUERY_DB_USER: query_user
      QUERY_DB_PASSWORD: query_password
      QUERY_DB_NAME: query_db
      PG_URL: 'postgres://query_user:query_password@query-db:5432/query_db'
      LOG_LEVEL: trace
    depends_on:
      - query-db
    ports:
      - "8083:8080"

 # Kafka Broker (Event Journal) with KRaft Mode (NO Zookeeper)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    restart: always
    container_name: kafka  
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_EXTERNAL://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_EXTERNAL://localhost:9094
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
       # Zookeeper gereksinimini kaldÄ±ran ayarlar
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    command: >
      bash -c "
      echo 'broker.id=1' > /etc/kafka/kafka.properties &&
      echo 'log.dirs=/var/lib/kafka/data' >> /etc/kafka/kafka.properties &&
      echo 'listeners=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_EXTERNAL://0.0.0.0:9094' >> /etc/kafka/kafka.properties &&
      echo 'advertised.listeners=PLAINTEXT://kafka:9092,PLAINTEXT_EXTERNAL://localhost:9094' >> /etc/kafka/kafka.properties &&
      echo 'controller.quorum.voters=1@kafka:9093' >> /etc/kafka/kafka.properties &&
      echo 'process.roles=controller,broker' >> /etc/kafka/kafka.properties &&
      echo 'controller.listener.names=CONTROLLER' >> /etc/kafka/kafka.properties &&
      echo 'listener.security.protocol.map=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT' >> /etc/kafka/kafka.properties &&
      echo 'offsets.topic.replication.factor=1' >> /etc/kafka/kafka.properties &&
      echo 'transaction.state.log.min.isr=1' >> /etc/kafka/kafka.properties &&
      echo 'transaction.state.log.replication.factor=1' >> /etc/kafka/kafka.properties &&
      echo 'auto.create.topics.enable=true' >> /etc/kafka/kafka.properties &&
      kafka-storage format --ignore-formatted -t $(kafka-storage random-uuid) -c /etc/kafka/kafka.properties &&
      kafka-server-start /etc/kafka/kafka.properties"



  # Asset Query Processor (Consumes Kafka Events and Updates Query DB)
  asset-query-processor:
    build:
      context: ./asset-query-processor
      dockerfile: Dockerfile
    restart: always
    environment:
      KAFKA_BROKER: kafka:9092
      EVENT_TOPIC: event-journal
      QUERY_DB_HOST: query-db
      QUERY_DB_PORT: 5432
      QUERY_DB_USER: query_user
      QUERY_DB_PASSWORD: query_password
      QUERY_DB_NAME: query_db
      PG_URL: 'postgres://query_user:query_password@query-db:5432/query_db'
      LOG_LEVEL: trace
    depends_on:
      - query-db
      - kafka

    
    
    # Asset Management Service (Command API - Writes to Kafka)
  asset-management-service:
    build:
      context: ./asset-management-service
      dockerfile: Dockerfile
    restart: always
    environment:
      KAFKA_BROKER: kafka:9092
      EVENT_TOPIC: event-journal  # Writes all transactions to this topic
      LOG_LEVEL: trace
    depends_on:
      - kafka
    ports:
      - "8082:8080"


volumes:
  wallet-db-data:
  query-db-data:
  kafka-data: